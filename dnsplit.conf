// dnsproxy config file
// This config file uses JSON syntax
{
    // listen-addr: local ip address to listen on
    "listen-addr": "127.0.0.1",

    // listen-port: UDP port to listen on
    "listen-port": 53,

    // default-nameservers: dns servers to forward requests
    // to when no rule is matched.
    // Default: OpenDNS servers
    "default-nameservers": ["208.67.222.222", "208.67.220.220"],

    // rules engine
    // ------------
    "rules": [

    // Rules can be created to forward requests to certain dns
    // servers according to specific conditions.  The rule are
    // processed sequentially, meaning that when a rule is match
    // the corresponding nameservers will be used and no more
    // rule will be processed.
    //
    // Conditions can be:
    // - an interface is up and has link (e.g. "tun0 up")
    // - an interface is in a specific network (e.g. 
    // "eth0 192.168.0.0/24")
    //
    // The "match" parameter can be used to forward queries to
    // specific domains to the internal nameservers and all other
    // queries to the default nameservers as configured above.
    //
    // For example, you may want to forward requests for your
    // company's dns suffix only when you are connected to vpn
    // and otherwise to the default nameservers.
    // 
    // In this case, you need to specify that those requests will
    // be forwarded to internal nameservers only if the vpn
    // interface is up and has link.  Such a rule would look like:
    //
    //    {
    //        "name": "My Company's Split-Tunnel VPN",
    //        "match": "*.mycompany.*",
    //        "condition": "tun0 up",
    //        "nameservers": ["10.0.0.10", "10.0.0.20"]
    //    },
    //
    // An other example would be if you want to use the internal
    // nameservers from a physical LAN that you connect to.  You
    // can specify that an interface needs to have an IP address
    // in a particular network to apply the rule.
    //
    //    {
    //        "name": "Corporate LAN",
    //        "match": "*.internaldomain.net",
    //        "condition": "eth0 192.168.42.0/23",
    //        "nameservers": ["192.168.42.100", "192.168.42.101"]
    //    },
    //
    // The "match" parameter can also be omitted to match all queries.
    // A rule to use exclusively the internal nameservers when
    // connected to the LAN would look like this:
    //
    //    {
    //        "name": "Corporate LAN",
    //        "condition": "eth0 192.168.42.0/23",
    //        "nameservers": ["192.168.42.100", "192.168.42.101"]
    //    },
    //
    // The "condition" parameter can also be omitted to function in
    // traditional dns-relay mode.  However, "match" and "condition"
    // can not be both omitted in the same rule as this would overwrite
    // the default nameservers.
	// The "match" parameter can also be a list for multiple matches.
    // Example rule: use google nameservers for all google queries:
    //
        {
            "name": "Use Google DNS for all Google queries",
            "match": ["google.com", "*.google.*", "*.gstatic.com", "*.gmail.com"],
            "nameservers": ["8.8.8.8", "8.8.4.4"]
        }

    // More examples
    // -------------
    // If you want to use your company's nameservers when connected to 
    // the corporate LAN but don't want to let them know that you are
    // slacking off on facebook instead of working.
    // Create 2 rules as below.
    // 
    //    {
    //        "name": "When at work forward FB queries to OpenDNS",
    // 	      "match": ["facebook.com", "*.facebook.com", "*.fbcdn.net"],
    //        "condition": "eth0 172.16.21.0/20",
    //        "nameservers": ["208.67.222.222", "208.67.220.220"]
    //    },
    //
    //    {
    //        "name": "When at work forward everything else to internal NS",
    //        "condition": "eth0 172.16.21.0/20",
    //        "nameservers": ["172.16.21.110", "172.16.21.110]
    //    },
    //
    // You can also use "interface down" as a condition.  This may be
    // useful if you want to use specific nameservers only if you are
    // disconnected from the VPN.  Example:
    //
    //    {
    //        "name": "When off VPN, send queries for mycompany to other NS",
    // 	      "match": ["mycompany.com", "*.mycompany.com"],
    //        "condition": "tun0 down",
    //        "nameservers": ["37.235.1.174", "37.235.1.177"]
    //    }
    //

    ]
}
